/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CopyDocumentAsHTMLPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function allWithProgress(promises, callback) {
  let count = 0;
  callback(0);
  for (const promise of promises) {
    promise.then(() => {
      count++;
      callback(count * 100 / promises.length);
    });
  }
  return Promise.all(promises);
}
async function delay(milliseconds) {
  return new Promise((resolve) => setTimeout(resolve, milliseconds));
}
var copyIsRunning = false;
var ppIsProcessing = false;
var ppLastBlockDate = Date.now();
var DocumentRenderer = class {
  constructor(view, app, options = { convertSvgToBitmap: true }) {
    this.view = view;
    this.app = app;
    this.options = options;
    this.optionRenderSettlingDelay = 100;
    this.mimeMap = /* @__PURE__ */ new Map([
      ["svg", "image/svg+xml"],
      ["jpg", "image/jpeg"]
    ]);
    this.imageExtensions = ["gif", "png", "jpg", "jpeg", "bmp", "png", "webp", "tiff", "svg"];
    this.vaultPath = this.app.vault.getRoot().vault.adapter.getBasePath().replace(/\\/g, "/");
    this.vaultUriPrefix = `app://local/${this.vaultPath}`;
  }
  async renderDocument() {
    this.modal = new CopyingToHtmlModal(this.app);
    this.modal.open();
    try {
      const topNode = await this.renderMarkdown();
      return await this.transformHTML(topNode);
    } finally {
      this.modal.close();
    }
  }
  async renderMarkdown() {
    const inputFile = this.view.file;
    const markdown = this.view.data;
    const wrapper = document.createElement("div");
    wrapper.style.display = "hidden";
    document.body.appendChild(wrapper);
    await import_obsidian.MarkdownRenderer.renderMarkdown(markdown, wrapper, inputFile.path, this.view);
    await this.untilRendered();
    await this.replaceEmbeds(wrapper);
    const result = wrapper.cloneNode(true);
    document.body.removeChild(wrapper);
    return result;
  }
  async untilRendered() {
    while (ppIsProcessing || Date.now() - ppLastBlockDate < this.optionRenderSettlingDelay) {
      if (ppLastBlockDate === 0) {
        break;
      }
      await delay(20);
    }
  }
  async replaceEmbeds(rootNode) {
    for (const node of Array.from(rootNode.querySelectorAll(".internal-embed"))) {
      const src = node.getAttr("src");
      const alt = node.getAttr("alt");
      if (!src) {
        node.remove();
        continue;
      }
      const extension = this.getExtension(src);
      if (extension === "" || extension === "md") {
        const file = this.getEmbeddedFile(src);
        if (file) {
          const markdown = await this.app.vault.cachedRead(file);
          await import_obsidian.MarkdownRenderer.renderMarkdown(markdown, node, file.path, this.view);
        }
      } else if (this.imageExtensions.includes(extension)) {
        const file = this.getEmbeddedFile(src);
        if (file) {
          const replacement = document.createElement("img");
          replacement.setAttribute("src", `${this.vaultUriPrefix}/${file.path}`);
          if (alt) {
            replacement.setAttribute("alt", alt);
          }
          node.replaceWith(replacement);
        }
      } else {
        node.remove();
      }
    }
  }
  getEmbeddedFile(src) {
    const subfolder = src.substring(this.vaultPath.length);
    const file = this.app.metadataCache.getFirstLinkpathDest(src, subfolder);
    if (!file) {
      console.error(`Could not load ${src}, not found in metadataCache`);
      return void 0;
    }
    if (!(file instanceof import_obsidian.TFile)) {
      console.error(`Embedded element '${src}' is not a file`);
      return void 0;
    }
    return file;
  }
  async transformHTML(element) {
    const node = element.cloneNode(true);
    node.style.paddingBottom = "0";
    node.style.minHeight = "0";
    this.removeCollapseIndicators(node);
    this.removeButtons(node);
    await this.embedImages(node);
    return node;
  }
  removeCollapseIndicators(node) {
    node.querySelectorAll(".collapse-indicator").forEach((node2) => node2.remove());
  }
  removeButtons(node) {
    node.querySelectorAll("button").forEach((node2) => node2.remove());
  }
  async embedImages(node) {
    const promises = [];
    node.querySelectorAll("img").forEach((img) => {
      if (img.src) {
        if (img.src.startsWith("data:image/svg+xml") && this.options.convertSvgToBitmap) {
          promises.push(this.replaceImageSource(img));
        } else if (!img.src.startsWith("data:")) {
          promises.push(this.replaceImageSource(img));
        }
      }
    });
    this.modal.progress.max = 100;
    await allWithProgress(promises, (percentCompleted) => this.modal.progress.value = percentCompleted);
    return node;
  }
  async replaceImageSource(image) {
    const imageSourcePath = decodeURI(image.src);
    if (imageSourcePath.startsWith(this.vaultUriPrefix)) {
      let path = imageSourcePath.substring(this.vaultUriPrefix.length + 1).replace(/[?#].*/, "");
      path = decodeURI(path);
      const mimeType = this.guessMimeType(path);
      const data = await this.readFromVault(path, mimeType);
      if (this.isSvg(mimeType) && this.options.convertSvgToBitmap) {
        image.src = await this.imageToDataUri(data);
      } else {
        image.src = data;
      }
    } else {
      image.src = await this.imageToDataUri(image.src);
    }
  }
  async imageToDataUri(url) {
    const canvas = document.createElement("canvas");
    const ctx = canvas.getContext("2d");
    const image = new Image();
    image.setAttribute("crossOrigin", "anonymous");
    const dataUriPromise = new Promise((resolve, reject) => {
      image.onload = () => {
        canvas.width = image.naturalWidth;
        canvas.height = image.naturalHeight;
        ctx.drawImage(image, 0, 0);
        try {
          const uri = canvas.toDataURL("image/png");
          resolve(uri);
        } catch (err) {
          console.log(`failed ${url}`, err);
          resolve(url);
        }
        canvas.remove();
      };
    });
    image.src = url;
    return dataUriPromise;
  }
  async readFromVault(path, mimeType) {
    const tfile = this.app.vault.getAbstractFileByPath(path);
    const data = await this.app.vault.readBinary(tfile);
    return `data:${mimeType};base64,` + (0, import_obsidian.arrayBufferToBase64)(data);
  }
  guessMimeType(filePath) {
    const extension = this.getExtension(filePath) || "png";
    return this.mimeMap.get(extension) || `image/${extension}`;
  }
  getExtension(filePath) {
    const fileName = filePath.slice(filePath.lastIndexOf("/") + 1);
    return fileName.slice(fileName.lastIndexOf(".") + 1 || fileName.length).toLowerCase();
  }
  isSvg(mimeType) {
    return mimeType === "image/svg+xml";
  }
};
var CopyingToHtmlModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  get progress() {
    return this._progress;
  }
  onOpen() {
    let { titleEl, contentEl } = this;
    titleEl.setText("Copying to clipboard");
    this._progress = contentEl.createEl("progress");
    this._progress.style.width = "100%";
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var CopyDocumentAsHTMLSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Copy document as HTML - Settings" });
    new import_obsidian.Setting(containerEl).setName("Convert SVG files to bitmap").setDesc("If checked SVG files are converted to bitmap. This makes the copied documents heavier but improves compatibility (eg. with gmail).").addToggle((toggle) => toggle.setValue(this.plugin.settings.convertSvgToBitmap).onChange(async (value) => {
      this.plugin.settings.convertSvgToBitmap = value;
      await this.plugin.saveSettings();
    }));
  }
};
var DEFAULT_SETTINGS = {
  convertSvgToBitmap: true
};
var CopyDocumentAsHTMLPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "copy-as-html",
      name: "Copy current document to clipboard",
      checkCallback: (checking) => {
        if (copyIsRunning) {
          console.log("Document is already being copied");
          return false;
        }
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (!activeView) {
          console.log("Nothing to copy: No active markdown view");
          return false;
        }
        if (!checking) {
          this.doCopy(activeView);
        }
        return true;
      }
    });
    const beforeAllPostProcessor = this.registerMarkdownPostProcessor(async () => {
      ppIsProcessing = true;
    });
    beforeAllPostProcessor.sortOrder = -1e4;
    const afterAllPostProcessor = this.registerMarkdownPostProcessor(async () => {
      ppLastBlockDate = Date.now();
      ppIsProcessing = false;
    });
    afterAllPostProcessor.sortOrder = 1e4;
    this.addSettingTab(new CopyDocumentAsHTMLSettingsTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async doCopy(activeView) {
    console.log(`Copying "${activeView.file.path}" to clipboard...`);
    const copier = new DocumentRenderer(activeView, this.app, { convertSvgToBitmap: this.settings.convertSvgToBitmap });
    try {
      copyIsRunning = true;
      ppLastBlockDate = Date.now();
      ppIsProcessing = true;
      const document2 = await copier.renderDocument();
      const data = new ClipboardItem({
        "text/html": new Blob([document2.outerHTML], {
          type: ["text/html", "text/plain"]
        }),
        "text/plain": new Blob([document2.outerHTML], {
          type: "text/plain"
        })
      });
      await navigator.clipboard.write([data]);
      console.log("Copied document to clipboard");
      new import_obsidian.Notice("document copied to clipboard");
    } catch (error) {
      new import_obsidian.Notice(`copy failed: ${error}`);
      console.error("copy failed", error);
    } finally {
      copyIsRunning = false;
    }
  }
};
